trigger: none

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '66610b9b-ea42-43ad-ac18-fe03425ba65c'
  containerRegistry: 'practicaldevops.azurecr.io'
  imagePullSecret: 'practicaldevops87969310-auth'
  vmImageName: 'ubuntu-latest'

  frontendImageRepository: 'frontend-minhvu'
  backendImageRepository: 'backend-minhvu'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build and Push Docker Images
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push frontend image
      inputs:
        command: buildAndPush
        repository: $(frontendImageRepository)
        dockerfile: src/frontend/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build and push backend image
      inputs:
        command: buildAndPush
        repository: $(backendImageRepository)
        dockerfile: src/backend/Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - publish: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      vmImage: $(vmImageName)
    environment: 'AKSPracticalDevops-1635.practicaldevops'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'

          - task: KubernetesManifest@0
            displayName: Deploy manifests
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/backend.yaml
                $(Pipeline.Workspace)/manifests/frontend.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(frontendImageRepository):$(tag)
                $(containerRegistry)/$(backendImageRepository):$(tag)
